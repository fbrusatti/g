<%# @encoding: UTF-8 %>
var COLUMN_CHECK = 10;
var propertiesToPrint;
$(document).ready(function() {

  var select = document.getElementById('property_influence_zone');
  if (select != null){
    select.onchange = function() {
      if(this.selectedIndex != this.options.length - 1) {
        return;
      }
      var new_name = prompt("<%= I18n.t('properties.zones.add_new') %>");
      if(new_name == null || !new_name.length) {
          return;
      }
      var option = $("<option/>").val(new_name).text(new_name);
      $(this).prepend(option);
      $('#property_influence_zone option:first').prop('selected', true);
    }
  }

  // SELECT TO ROWS
  $('.multiselect').multiselect({
      maxHeight: 400,
      buttonText: function(options, select) {
        if (options.length == 0) {
          return "Habitaciones"+'<b class="caret"></b>';
        }
        else if (options.length > 3) {
          return options.length + " <%=I18n.t('properties.selected_rooms.selected') %>" + '<b class="caret"></b>';
        }
        else {
          var selected = '';
          options.each(function() {
            selected += $(this).text() + ', ';
          });
          return selected.substr(0, selected.length -2) + ' <b class="caret"></b>';
        }
      }
  });

  hiddenInputs();
  // button remove of form property
  $("a.property-remove").click(function() {
    if (confirm("<%= I18n.t('confirm_remove.confirm') %>")){
      $("a.property-save, a.property-remove").attr("disabled", true);
      $('#property_active').prop('value',0);
      $("[id^=edit_property_]").submit();
    }
  });

  // button save of form property
  $("a.property-save").click(function() {
    if (validateTransactions()){
      cleanUpTransactionFields();
      $("a.property-save").attr("disabled", true);
      $("#new_property, [id^=edit_property_]").submit();
    } else
      alert("<%= I18n.t('properties.transactions.error') %>");
  });

  $(".gallery").fancybox({
    openEffect  : 'elastic',
    closeEffect : 'elastic',
    prevEffect  : 'elastic',
    nextEffect  : 'elastic'
  });

  // close the photo and set _destroy
  $('form').on('click', '.remove_fields', function(event) {
    $(this).siblings().find("input[type=hidden]").val('1');
    $(this).closest('.photo').hide();
    return event.preventDefault();
  });

  // add new photo
  $('form').on('click', '.add_fields', function(event) {
    var regexp, time;
    time = new Date().getTime();
    regexp = new RegExp($(this).data('id'), 'g');
    $(this).before($(this).data('fields').replace(regexp, time));
    event.preventDefault();
  });

  // token to customer
  $('#property_owner_tokens').tokenInput('/customers.json', {
    crossDomain: false,
    prePopulate: $('#property_owner_tokens').data('pre'),
    theme: "facebook",
    tokenLimit: "1",
    noResultsText: "<%= I18n.t('.token_input.noResultsText') %>",
    hintText: "<%= I18n.t('.token_input.hintText_surname')%>",
    searchingText: "<%= I18n.t('.token_input.searchingText')%>",
    resultsFormatter: function(item){
      return "<li><p style='color: black' >" + item.name
      + " " + item.surname +  " " + item.dni + " </p> </li>" },
    tokenFormatter: function(item) {
      return "<li><p>" + (item.name + " " +
      item.surname ).substring(0,22)+ " " + item.dni + " </p> </li>" }
  });

  // changes the visibility of transactions inputs
  $("#to_sale, #to_rent").on('click', function(e){
    $(this).parents(".thorizontal").siblings().toggle("show");
  });

    /*********
    DATA-TABLE
    **********/

  // function table to contracts
  // ---------------------------
  var contractTable;
  contractTable = $('#show-property-contracts-table').dataTable({
    sPaginationType: "full_numbers",
    bJQueryUI: true,
    bProcessing: true,
    bServerSide: true,
    oLanguage: {
        sUrl: "/datatables/spanish.txt"
    },
    sAjaxSource: $('#show-property-contracts-table').data('source'),
    aaSorting: [[ 0, "desc" ]],
    bAutoWidth: false,
    aoColumns:
      [
        { "sClass": "center" },
        { "bSearchable": true },
        { "bSearchable": true },
        { "sClass": "center", "bSearchable": true }
      ],
    fnServerParams: function ( aoData ) {
      aoData.push( { "name": "property_id", "value": $('#property-id').data('id') } )
    }
  });
  rowSelected(contractTable, "#show-property-contracts-table");

  // function principal to show
  // ---------------------------
  var oTable, bMyProperties;
  bMyProperties = false;
  oTable = $('#property-history').dataTable({
    sPaginationType: "full_numbers",
    bJQueryUI: true,
    bProcessing: true,
    bServerSide: true,
    oLanguage: {
        sUrl: "/datatables/spanish.txt"
    },
    sAjaxSource: $('#property-history').data('source'),
    bAutoWidth: false,
    aoColumns: [
      { "sWidth": "45%", "bSearchable": false },
      { "sWidth": "10%", "sClass": "center", "bSearchable": true },
      { "sWidth": "10%", "bSearchable": true }
    ]
  });

  // function principal to index
  // ---------------------------
  var oTable, bMyProperties, rent_from, rent_to, sale_from, sale_to;
  bMyProperties = false;
  oTable = $('#properties').dataTable({
    sPaginationType: "full_numbers",
    bJQueryUI: true,
    bProcessing: true,
    bServerSide: true,
    oLanguage: {
        sUrl: "/datatables/spanish.txt"
    },
    sAjaxSource: $('#properties').data('source'),
    aaSorting: [[ 0, "desc" ]],
    fnInitComplete: function(oSettings, json){
      // Add a select menu for each TH element in the table footer
      $("thead th").each( function (i) {
          $('select', this).change( function () {
            oTable.fnFilter($(this).val(),i);
           });
          $('.aligned-input input', this).change( function () {
            sale_from = $('input[name="sale_from"]').val();
            sale_to = $('input[name="sale_to"]').val();
            rent_from = $('input[name="rent_from"]').val();
            rent_to = $('input[name="rent_to"]').val();
            oTable.fnFilter($(this).val(),i);
           });
      });
    },
    aoColumns: aColumnsOptions,
    "fnServerParams": function ( aoData ) {
      aoData.push( { "name": "sale_from", "value": sale_from } );
      aoData.push( { "name": "sale_to", "value": sale_to } );
      aoData.push( { "name": "rent_from", "value": rent_from } );
      aoData.push( { "name": "rent_to", "value": rent_to } );
      aoData.push( { "name": "bMyProperties", "value": bMyProperties } );
      aoData.push( { "name": "list_checked", "value": propertiesToPrint } );
    },
    bAutoWidth: false,
    sDom: '<"H"lTCfr>t<"F"ip>',
    oTableTools: {
      aButtons: [
        {
          "sExtends":    "collection",
          "sButtonText": "Exportar",
          "aButtons":
            [ "xls",
              {
                "sExtends": "pdf",
                "sPdfOrientation": "landscape"
              }
            ]
        }
      ]
    }
  });
  rowSelected(oTable, "#properties");

  $("a#tab-all-prop").click(function() {
    bMyProperties = false;
    oTable.fnFilter("");
  });
  $("a#tab-my-prop").click(function() {
    bMyProperties = true;
    oTable.fnFilter("");
  });

  // fixes issue: the map loads only half inside a modal or  a tab
  $('a[href="#show-map"]').on('shown.bs.tab', function(e){
      google.maps.event.trigger(map, 'resize');
      markers.panTo();
  });

  $(document).on('keypress change','#property_address, #property_location_id', function(e){
    var data, adddres, location, isEnterKey;
    istEnterKey = (e.type == 'keypress' && e.keyCode == 13);
    if (istEnterKey || e.type == 'change') {
      address = $('#property_address').val();
      location = $('#property_location_id option:selected').text();
      data = { address: address + " " + location }
      $.get( "/properties/geocoding", data, function( data ) {
        handler.removeMarker(markers);
        markers = handler.addMarker(data);
        markers.panTo();
      });
    }
  });

  // print list of properties
  $(document).on('click', 'button#open_check', function(event){
    event.preventDefault();
    fnShowHideColumnVisibility(COLUMN_CHECK, oTable);
    $('.sub-header #property_print_index').hide();
    $('.sub-header #confirm').css('visibility', 'visible');
    propertiesToPrint = [];
    aux = $("#select_count_of_rooms").val();
    $('#rooms_selector').val(aux).prop('checked', true).change();
    $('#rooms_selector').multiselect("refresh");
    if ($('#print_list_transaction :selected').val() != "") {
      aux = $('#print_list_transaction :selected').text();
      $('#transaction_selector').val(aux).prop('selected', true).change();
    }
    // clean up the list_checked in server.
    $('ul.property-tabs li #tab-all-prop').click();
  });
  $(document).on('click', '.sub-header #confirm a.property-danger', function(event){
    event.preventDefault();
    fnShowHideColumnVisibility(COLUMN_CHECK, oTable);
    $('.sub-header #confirm').css('visibility', 'hidden');
    $('.sub-header #property_print_index').show();
  });
  $(document).on('click', '.sub-header #confirm a.property-print', function(event){
    event.preventDefault();
    $('#modal_print_list_properties.modal .modal-footer #submit_generate').click();
  })
  $(document).on('click', '#check_all', function (e) {
    $(this).closest('table').find('td input:checkbox').prop('checked', this.checked).change();
  });

  // handled of property list  to print
  $(document).on('change','table input[name="to_list"]', function(event){
    if (this.checked)
      propertiesToPrint.push(this.value)
    else {
      i = propertiesToPrint.indexOf(this.value);
      if(i != -1)
        propertiesToPrint.splice(i, 1)
    }
    $('#modal_print_list_properties #print_list_property_ids').val(propertiesToPrint);
  });

});// END-$(document)

  /*********
  DATA-TABLE
  **********/

var aColumnsOptions =
    [
      { "sWidth": "1%", "sClass": "center", "bSearchable": true },
      { "sWidth": "5%", "bSearchable": true },
      { "sWidth": "5%", "bSearchable": true },
      { "sWidth": "6%", "bSearchable": true },
      { "sWidth": "10%", "bSearchable": true },
      { "sWidth": "1%", "sClass": "center", "bSearchable": true },
      { "sWidth": "1%", "bSearchable": true },
      { "sWidth": "1%", "bSearchable": true },
      { "sWidth": "10%", "bSearchable": false, "bSortable": false},
      { "sWidth": "5%", "bSearchable": false, "bSortable": false},
      { "sWidth": "1%", "sClass": "text-align:center",
        "bSearchable": false, "bSortable": false, "bVisible": false,
        "sTitle": "<input style='center' type='checkbox' id='check_all'/>" }
    ]
// --- end data-table ----

function validateTransactions(){
  var rent, sale, tinput, sale_ok, rent_ok;
  sale_ok = true; rent_ok = true;
  rent = $('#to_rent');
  sale = $('#to_sale');
  if (sale.prop('checked')){
    tinput = sale.parents(".thorizontal").siblings().children(".tinput");
    tinput.children().each( function(i, e){
      sale_ok =  sale_ok && $(e).val() !=""
    })
  }
  if (rent.prop('checked')){
    tinput = rent.parents(".thorizontal").siblings().children(".tinput");
    tinput.children().each( function(i, e){
      rent_ok =  rent_ok && $(e).val() !=""
    })
  }
  return sale_ok && rent_ok
}


// clean up the input and select fields that aren't checked
function cleanUpTransactionFields() {
 var rent, sale, tinput;
  rent = $('#to_rent');
  sale = $('#to_sale');
  if (!sale.prop('checked')){
    tinput = sale.parents(".thorizontal").siblings().children(".tinput");
    tinput.children().each( function(i, e){
      $(e).val("");
    })
  }
  if (!rent.prop('checked')){
    tinput = rent.parents(".thorizontal").siblings().children(".tinput");
    tinput.children().each( function(i, e){
      $(e).val("");
    })
  }
}

function hiddenInputs () {
  var rent, sale;
  rent = $('#to_rent');
  sale = $('#to_sale');
  if (!rent.prop('checked')){
    rent.parents(".thorizontal").siblings().hide();
  }
  if (!sale.prop('checked')) {
    sale.parents(".thorizontal").siblings().hide();
  }
}

function loadPreview(input) {
  inputFile = "#" + input.id;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e, input) {
    $(inputFile).next()
      .attr('src', e.target.result)
      .width(200)
      .height(200);
    };
    reader.readAsDataURL(input.files[0]);
  }
}

function buildMap(marker){
  handler = Gmaps.build('Google', { markers: { maxRandomDistance: null } });
  handler.buildMap({ provider: {maxZoom: 17}, internal: {id: 'map'}}, function(){
    markers = handler.addMarker(marker);
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });// end handler
}
