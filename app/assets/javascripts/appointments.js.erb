$(document).ready(function(){
  $('.appointment_date_time_picker').datetimepicker({
    language: 'es',
    maskInput: true,
    pick12HourFormat: true,
    format: 'dd/MM/yyyy hh:mm',
    startDate: new Date(),
    endDate: Infinity
  });

  $("a.appointment-save").click(function() {
    $("#new_appointment, [id^=edit_appointment_]").submit();
  });
})

$(function () {

  $('#appointment_customer_tokens').tokenInput('/customers.json', {
    crossDomain: false,
    prePopulate: $('#appointment_customer_tokens').data('pre'),
    theme: "facebook",
    tokenLimit: "1",
    noResultsText: "<%= I18n.t('.token_input.noResultsText') %>",
    hintText: "<%= I18n.t('.token_input.hintText')%>",
    searchingText: "<%= I18n.t('.token_input.searchingText')%>",
    resultsFormatter: function(item){
      return "<li><p style='color: black' >" + item.name
      + " " + item.surname + " (" + item.dni + ") </p> </li>" },
    tokenFormatter: function(item) {
      return "<li><p>" + item.name + " " + item.surname +
      " (" + item.dni + ") </p> </li>" }
  });

  $('#appointment_property_tokens').tokenInput('/properties.json', {
    crossDomain: false,
    prePopulate: $('#appointment_property_tokens').data('pre'),
    theme: "facebook",
    propertyToSearch: "address",
    tokenLimit: "1",
    noResultsText: "<%= I18n.t('.token_input.noResultsText') %>",
    hintText: "<%= I18n.t('.token_input.hintText')%>",
    searchingText: "<%= I18n.t('.token_input.searchingText')%>",
     resultsFormatter: function(item){
      return "<li><p style='color: black' >" + item.address
      + " (" + item.id + ") </p> </li>" },
     tokenFormatter: function(item) {
       return "<li><p>" + item.address +
       " (" + item.id + ") </p> </li>" }
  });
});



  $(document).ready(function() {
    var dateType;


    var oTable = $('#appointments').dataTable({
      sPaginationType: "full_numbers",
      bJQueryUI: true,
      bProcessing: true,
      bServerSide: true,
      // "sDom": "Rlfrtip",
      sAjaxSource: $('#appointments').data('source'),
      "fnInitComplete": function(oSettings, json) {

        /* Add a select menu for each TH element in the table footer */
        $("thead th").each( function ( i ) {
            $('select', this).change( function () {

              oTable.fnFilter( $(this).val(),i);
             } );

        } );
        $("a.appointment-today").click(function() {
          dateType="today";
          oTable.fnFilter("");
        });
        $("a.appointment-week").click(function() {
           dateType="week";
           oTable.fnFilter("");
        });
        $("a.appointment-month").click(function() {
           dateType="month";
           oTable.fnFilter("");
        });
        $("a.appointment-all").click(function() {
           dateType= null;
           oTable.fnFilter("");
        });
      },

      "fnServerData": function ( sSource, aoData, fnCallback ) {

         aoData.push( { "name": "dateType", "value": dateType });

         $.getJSON( sSource, aoData, function (json) {
           /* Do whatever additional processing you want on the callback, then tell DataTables */
            fnCallback(json)
         } );

     }

  });

 });




 // var asInitVals = new Array();

 //    $(document).ready(function() {

 //        /*
 //         * Support functions to provide a little bit of 'user friendlyness' to the textboxes in
 //         * the footer
 //         */
 //        $("tfoot input").each( function (i) {
 //            asInitVals[i] = this.value;
 //        } );
 //        $("tfoot input").focus( function () {
 //            if ( this.className == "search_init" )
 //            {
 //                this.className = "";
 //                this.value = "";
 //            }
 //        } );
 //        $("tfoot input").blur( function (i) {
 //            if ( this.value == "" )
 //            {
 //                this.className = "search_init";
 //                this.value = asInitVals[$("tfoot input").index(this)];
 //            }
 //        } );

 //        var oTable = $('#appointments').dataTable( {
 //            "oLanguage": {
 //                "sSearch": "Search all columns:"
 //            },
 //        sPaginationType: "full_numbers",
 //        bJQueryUI: true,
 //        bProcessing: true,
 //        bServerSide: true,
 //        // "sDom": "Rlfrtip",
 //        sAjaxSource: $('#appointments').data('source'),

 //        "fnInitComplete": function() {
 //            var oSettings = $('#appointments').dataTable().fnSettings();
 //            for ( var i=0 ; i<oSettings.aoPreSearchCols.length ; i++ ){
 //                if(oSettings.aoPreSearchCols[i].sSearch.length>0){
 //                    $("tfoot input")[i].value = oSettings.aoPreSearchCols[i].sSearch;
 //                    $("tfoot input")[i].className = "";
 //                }
 //            }
 //        }
 //    } );

 //        $("#appointments tfoot input").keyup( function () {
 //          var id = $(this).attr('id').split("-")[1];
 //          oTable.fnFilter( this.value, id );
 //        });

 //        // $("tfoot input").keyup( function () {
 //        //      Filter on the column (the index) of this element
 //        //     oTable.fnFilter( this.value, $("tfoot input").index(this) );
 //        // } );

 //    } );


// (function($) {
// /*
//  * Function: fnGetColumnData
//  * Purpose:  Return an array of table values from a particular column.
//  * Returns:  array string: 1d data array
//  * Inputs:   object:oSettings - dataTable settings object. This is always the last argument past to the function
//  *           int:iColumn - the id of the column to extract the data from
//  *           bool:bUnique - optional - if set to false duplicated values are not filtered out
//  *           bool:bFiltered - optional - if set to false all the table data is used (not only the filtered)
//  *           bool:bIgnoreEmpty - optional - if set to false empty values are not filtered from the result array
//  * Author:   Benedikt Forchhammer <b.forchhammer /AT\ mind2.de>
//  */
// $.fn.dataTableExt.oApi.fnGetColumnData = function ( oSettings, iColumn, bUnique, bFiltered, bIgnoreEmpty ) {
//     // check that we have a column id
//     if ( typeof iColumn == "undefined" ) return new Array();

//     // by default we only want unique data
//     if ( typeof bUnique == "undefined" ) bUnique = true;

//     // by default we do want to only look at filtered data
//     if ( typeof bFiltered == "undefined" ) bFiltered = true;

//     // by default we do not want to include empty values
//     if ( typeof bIgnoreEmpty == "undefined" ) bIgnoreEmpty = true;

//     // list of rows which we're going to loop through
//     var aiRows;

//     // use only filtered rows
//     if (bFiltered == true) aiRows = oSettings.aiDisplay;
//     // use all rows
//     else aiRows = oSettings.aiDisplayMaster; // all row numbers

//     // set up data array
//     var asResultData = new Array();

//     for (var i=0,c=aiRows.length; i<c; i++) {
//         iRow = aiRows[i];
//         var aData = this.fnGetData(iRow);
//         var sValue = aData[iColumn];

//         // ignore empty values?
//         if (bIgnoreEmpty == true && sValue.length == 0) continue;

//         // ignore unique values?
//         else if (bUnique == true && jQuery.inArray(sValue, asResultData) > -1) continue;

//         // else push the value onto the result data array
//         else asResultData.push(sValue);
//     }

//     return asResultData;
// }}(jQuery));


// function fnCreateSelect( aData )
// {
//     var r='<select><option value=""></option>', i, iLen=aData.length;
//     for ( i=0 ; i<iLen ; i++ )
//     {

//         r += '<option value="'+aData[i]+'">'+aData[i]+'</option>';
//     }
//     return r+'</select>';
// }